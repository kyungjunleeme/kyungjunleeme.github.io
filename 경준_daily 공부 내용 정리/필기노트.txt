zpip install "django~=2.1.0"
> 2.1.x 버전중에 최신버전을 설치한다.

django-admin --version
> 장고 버전 확인

django-admin startproject askcompany
> 프로젝트 생성

start .

cd askcompany

ptyhon manage.py migrate

python manage.py createsuperuser

python manage.py runserver


<3강> 

장고 앱 만들기

python manage.py startapp shop

python manage.py startapp blog


<4강>

view를 하나 만들어보려고함

보통 view를 urls.py에 만들지는 않음

pip install pyling-django

<5강>



python .\manage.py startapp shop

<step 1. shop app 안의 urls.py>

shop app 안의 urls.py

from django.urls import path

app_name = 'shop'

urlpatterns = [

]

<step 2. KYUNGJUNCOMPANY 프로젝트 안의 settings.py>

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop',   <--------------------------------- 앱 추가
]
 
<step 3. 프로젝트 안의 urls.py>

from django.contrib import admin
from django.urls import path, include   <----- include 추가

urlpatterns = [
    path('admin/', admin.site.urls),
    paht('shop/', include('shop.urls')),    <--------추가
]

커스텀 Path Converter

새로운 장고 앱을 생성할 때, 추천 작업

<step1. 앱 밑에 converters.py>


class FourDigitYearConverter:
    regex = r'\d{4}'

    def to_python(self, value):
        return int(value)

    def to_url(self, value):
        return '%04d' % value

<step2. 앱 밑에 urls.py>

from django.urls import path, register_converter
from .converters import FourDigitYearConverter
from . import views

register_converter(FourDigitYearConverter, 'yyyy')

app_name = 'shop'

urlpatterns = [
    path('archives/<yyyy:year>/', views.archives_year)
]


<step3. 앱 밑에 views.py>
from django.http import HttpResponse
from django.shortcuts import render

def archives_year(request, year):
    return HttpResponse('{}년도에 대한 내용'.format(year))

<step4. 결과 확인>
http://127.0.0.1:8000/shop/archives/2018/
> 2018년도에 대한 내용 (출력됨)

> (추가 설명)

http://127.0.0.1:8000/shop/

> project의 urls.py에서 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('shop/', include('shop.urls')),
]

shop으로 시작하고, 나머지 주소는 shop.urls에서 이어서 가는 거임


archives/2018/

> shop의 urls.py에서 

app_name = 'shop'

urlpatterns = [
    path('archives/<yyyy:year>/', views.archives_year)  >>>숫자가 4번 반복되는 패턴에서는 archives_year이 호출된다.
]

<6강>

다양한 타입의 HttpResponse

MIME 타입

> https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types

[프로그램적인 파일 다운로드]
https://start.goodtime.co.kr/2009/04/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%A0%81%EC%9D%B8-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C/

[browser 한글 Content-Disposition 헤더의 filename 매개 변수를 HTTP로 인코딩하는 방법]
https://code.i-harness.com/ko-kr/q/16d6f

<7강>
그런 REST API로 괜찮은가
https://tv.naver.com/v/2292653#comment_focus

REST
interoperability - 상호운용성
REST 가 어떤 계기로 나온건가?
REST(2000) - Roy T. Fielding 박사논문
"Architectural Styles and the Design of Network-based Software Architectures"

-----------------------------------------------------------

API

그런데

CMIS(2008)
- CMS를 위한 표준
- EMC, IBM, Microsoft등이 함께 작업
- REST 바인딩 지원

(반박)
Roy T. Fielding: "No Rest in CMIS"

Microsoft REST API Guidelines (2016)

(반박)
Roy T. Fielding: "s/REST API/HTTP API/"
"REST APIs must be hypertext-driven"
"REST API를 위한 최고의 버저닝 전략은 버저닝을 안 하는 것"

REST API
> REST 아키텍쳐 스타일을 따르는 API

REST
> 분산 하이퍼미디어 시스템(예: 웹)을 위한 아키텍쳐 스타일

아키텍쳐 스타일
> 제약조건의 집합

독립적 진화
- 서버와 클라이언트가 각각 독립적으로 진화한다.
- 서버의 기능이 변경되어도 클라이언트를 업데이트할 필요가 없다.
- REST를 만들게 된 계기: "How do I improve HTTP without breaking the Web."

<8강>

vs code terminal 에서 다음의 명령어들을 실행

ipython
import os
os.environ
os.envioron['DJANGO_SETTINGS_MODULE']
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kyungjuncompany.settings')
import django
django.setup()
from django.contrib.auth import get_user_model
User = get_user_model()
User.objects.all()
exit()

vs code 내에서 왼쪽 탐색창에서 파일을 열어도 되지만, Ctrl + P를 눌러서 실행하고자 하는 파일을 직접 실행시켜도 됨

django-extensions 내 shell_plus 명령

django-extensions.readthedocs.io
https://django-extensions.readthedocs.io/en/latest/

1)
쉘 > pip install djangl-extensions

2)
프로젝트 settings.INSTALLED_APPS에 "django_extensions" 추가

> 이렇게 하면

python .\manage.py shell_plus 실행시 자동으로 필요한 django 라이브러리들을 import 해줌

python .\manage.py shell_plus --notebook

python .\manage.py shell_plus --print-sql

<9강>

PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add        
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
 [X] 0009_alter_user_last_name_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 (no migrations)

---------------------------

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations shop
Migrations for 'shop':
  shop\migrations\0001_initial.py
    - Create model Item


PS C:\Dev\kyungjuncompany> python .\manage.py migrate shop
Operations to perform:
  Apply all migrations: shop
Running migrations:
  Applying shop.0001_initial... OK


----------------------------------

PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations     
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0009_alter_user_last_name_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 [ ] 0001_initial
PS C:\Dev\kyungjuncompany> python .\manage.py migrate shop
Operations to perform:
  Apply all migrations: shop
Running migrations:
  Applying shop.0001_initial... OK
PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations     
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
 [X] 0009_alter_user_last_name_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 [X] 0001_initial


settings.py 내에

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


