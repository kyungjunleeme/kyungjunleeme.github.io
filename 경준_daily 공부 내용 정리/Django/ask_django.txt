장고 어드민 계정 정보:
kyungjun / qweasdzxc1!


<1강> 01 개발환경 구축하기
=====================================================
◈ 웹프레임워크의 필요성
◈ 장고 설치
◈ 장고 프로젝트 생성하고 초기화하기
====================================================

pip install "django~=2.1.0"
> 2.1.x 버전중에 최신버전을 설치한다.

django-admin --version
> 장고 버전 확인

django-admin startproject askcompany
> 프로젝트 생성

start .

cd askcompany

ptyhon manage.py migrate

python manage.py createsuperuser

python manage.py runserver


<2강> 장고의 주요 구성 요소
=============================================================
장고는 주요 구성 요소에 대해서 살펴보고, 맛보기로 장고로 웹페이지를 하나 만들어봅시다.
=============================================================


<3강> 
==========================================================================
장고 앱은 재사용성을 목적으로한 파이썬 팩키지입니다.

장고 앱의 필요성에 대해서 살펴보고, 앱 규모에 따라 models/views 모듈을 팩키지로 전환하는 방법에 대해서 살펴보겠습니다.

◈ 모듈: 파이썬 소스코드 파일
◈ 패키지: 파이썬 소스코드 디렉토리

◈ 프로젝트와 애플리케이션 모두 파이썬 패키지 디렉토리에 해당하는데, 파이썬에서는 __init__.py 파일이 존재하는 디렉토리를 패키지라고 합니다.  

=========================================================================

장고 앱
- 재사용성을 목적으로한 파이썬 패키지 

장고 앱 만들기

python manage.py startapp shop

python manage.py startapp blog


프로젝트명과 동일한 이름(이름 변경 가능) > 프로젝트(이름 변경 불가능) > settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_extensions',
    'debug_toolbar',
    'blog',
    'shop',
]

에 앱을 추가해줘야 함



<4강> 04 VSCode 장고 디버깅 세팅하기

============================================================

Visual Studio Code의 디버깅 기능을 통해 장고 애플리케이션을 디버깅해봅시다.

=============================================================
pip install pylint-django

settings.json 내


{
    "window.zoomLevel": 0,
    "python.linting.pylintArgs": [
        "--disable C0111,C0301",
        "--load-plugins pylint_django"
    ],
    "terminal.integrated.shell.windows": "C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
    "prettier.printWidth": 140,
    "prettier.tabWidth": 4,
    "prettier.singleQuote": true,
    "[json]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "editor.fontFamily": "D2Coding, Consolas, 'Courier New', monospace",
}


view를 하나 만들어보려고함

보통 view를 urls.py에 만들지는 않음



<5강> 05 URLConf와 정규 표현식

=====================================================================

◈ 간단한 정규표현식에 대한 이해
◈ 다양한 URL 패턴 : 정수, 년/월/일, slug
◈ path, re_path
◈ 새로운 장고 앱을 만들자마자 해야할 일

=======================================================================

<문법>
- 1글자에 대한 패턴 + 연속된 출연 횟수 지정
- 대괄호 내에 1글자에 대한 후보 글자들을 나열
> 2자리 숫자
"[0123456789][0123456789]" 혹은 [0-


python .\manage.py startapp shop

<step 1. shop app 안의 urls.py>

shop app 안의 urls.py 만들고 여기 내에

from django.urls import path

app_name = 'shop'

urlpatterns = [

]

<step 2. KYUNGJUNCOMPANY 프로젝트 안의 settings.py>

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop',   <--------------------------------- 앱 추가
]
 
<step 3. 프로젝트 안의 urls.py>

from django.contrib import admin
from django.urls import path, include   <----- include 추가

urlpatterns = [
    path('admin/', admin.site.urls),
    paht('shop/', include('shop.urls')),    <--------추가
]

커스텀 Path Converter

새로운 장고 앱을 생성할 때, 추천 작업

<step1. 앱 밑에 converters.py>


class FourDigitYearConverter:
    regex = r'\d{4}'

    def to_python(self, value):
        return int(value)

    def to_url(self, value):
        return '%04d' % value

<step2. 앱 밑에 urls.py>

from django.urls import path, register_converter
from .converters import FourDigitYearConverter
from . import views

register_converter(FourDigitYearConverter, 'yyyy')

app_name = 'shop'

urlpatterns = [
    path('archives/<yyyy:year>/', views.archives_year)
]


<step3. 앱 밑에 views.py>
from django.http import HttpResponse
from django.shortcuts import render

def archives_year(request, year):
    return HttpResponse('{}년도에 대한 내용'.format(year))

<step4. 결과 확인>
http://127.0.0.1:8000/shop/archives/2018/
> 2018년도에 대한 내용 (출력됨)

> (추가 설명)

http://127.0.0.1:8000/shop/

> project의 urls.py에서 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('shop/', include('shop.urls')),
]

shop으로 시작하고, 나머지 주소는 shop.urls에서 이어서 가는 거임


archives/2018/

> shop의 urls.py에서 

app_name = 'shop'

urlpatterns = [
    path('archives/<yyyy:year>/', views.archives_year)  >>>숫자가 4번 반복되는 패턴에서는 archives_year이 호출된다.
]

<6강> 다양한 응답의 함수 기반 뷰 만들기

==========================================================================

◈ What is View?
◈ FBV & CBV
◈ FBV로 강의를 진행하는 이유
◈ HttpRequest와 HttpResponse
◈ 다양한 타입의 Response

==========================================================================

다양한 타입의 HttpResponse

MIME 타입

> https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types

[프로그램적인 파일 다운로드]
https://start.goodtime.co.kr/2009/04/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%A0%81%EC%9D%B8-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C/

[browser 한글 Content-Disposition 헤더의 filename 매개 변수를 HTTP로 인코딩하는 방법]
https://code.i-harness.com/ko-kr/q/16d6f

Pandas를 통한 CSV 응답 생성

import pandas as pd
from io import StringIO(메모리 기반 파일 객체)
from django.http import HttpResponse

(중간 코드 생략)

io = StringIO()
df.to_csv(io)
io.seek(0) # 끝에 있는 file cursor를 처음으로 이동시킴



<7강> 적절한 HTTP 상태코드로 응답하기
======================================================================

◈ 모든 웹서버는 현재 요청에 대한 처리결과를 숫자코드로서 응답해야 합니다. 이것이 HTTP 상태코드입니다.

========================================================================

https://github.com/django/django/blob/master/django/http/response.py 내

class HttpResponseBase:
    """
    An HTTP response base class with dictionary-accessed headers.
    This class doesn't handle content. It should not be used directly.
    Use the HttpResponse and StreamingHttpResponse subclasses instead.
    """

    status_code = 200 ## 기본적으로 200

    def __init__(self, content_type=None, status=None, reason=None, charset=None):
        # _headers is a mapping of the lowercase name to the original case of
        # the header (required for working with legacy systems) and the header
        # value. Both the name of the header and its value are ASCII strings.
        self._headers = {}
        self._closable_objects = []
        # This parameter is set by the handler. It's necessary to preserve the
        # historical behavior of request_finished.
        self._handler_class = None
        self.cookies = SimpleCookie()
        self.closed = False
        if status is not None:
            try:
                self.status_code = int(status)  ### status_code를 직접 만들 수 도 있고
            except (ValueError, TypeError):
                raise TypeError('HTTP status code must be an integer.')

            if not 100 <= self.status_code <= 599:
                raise ValueError('HTTP status code must be an integer from 100 to 599.')
        self._reason_phrase = reason
        self._charset = charset
        if content_type is None:
            content_type = 'text/html; charset=%s' % self.charset
        self['Content-Type'] = content_type



class HttpResponseRedirect(HttpResponseRedirectBase):
    status_code = 302


class HttpResponsePermanentRedirect(HttpResponseRedirectBase):
    status_code = 301


class HttpResponseNotModified(HttpResponse):
    status_code = 304

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        del self['content-type']

    @HttpResponse.content.setter
    def content(self, value):
        if value:
            raise AttributeError("You cannot set content to a 304 (Not Modified) response")
        self._container = []


class HttpResponseBadRequest(HttpResponse):
    status_code = 400


class HttpResponseNotFound(HttpResponse):
    status_code = 404


class HttpResponseForbidden(HttpResponse):
    status_code = 403


class HttpResponseNotAllowed(HttpResponse):
    status_code = 405

    def __init__(self, permitted_methods, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self['Allow'] = ', '.join(permitted_methods)

    def __repr__(self):
        return '<%(cls)s [%(methods)s] status_code=%(status_code)d%(content_type)s>' % {
            'cls': self.__class__.__name__,
            'status_code': self.status_code,
            'content_type': self._content_type_for_repr,
            'methods': self['Allow'],
        }


class HttpResponseGone(HttpResponse):
    status_code = 410


class HttpResponseServerError(HttpResponse):
    status_code = 500


class Http404(Exception):
    pass




그런 REST API로 괜찮은가
https://tv.naver.com/v/2292653#comment_focus

REST
interoperability - 상호운용성
REST 가 어떤 계기로 나온건가?
REST(2000) - Roy T. Fielding 박사논문
"Architectural Styles and the Design of Network-based Software Architectures"

-----------------------------------------------------------

API

그런데

CMIS(2008)
- CMS를 위한 표준
- EMC, IBM, Microsoft등이 함께 작업
- REST 바인딩 지원

(반박)
Roy T. Fielding: "No Rest in CMIS"

Microsoft REST API Guidelines (2016)

(반박)
Roy T. Fielding: "s/REST API/HTTP API/"
"REST APIs must be hypertext-driven"
"REST API를 위한 최고의 버저닝 전략은 버저닝을 안 하는 것"

REST API
> REST 아키텍쳐 스타일을 따르는 API

REST
> 분산 하이퍼미디어 시스템(예: 웹)을 위한 아키텍쳐 스타일

아키텍쳐 스타일
> 제약조건의 집합

독립적 진화
- 서버와 클라이언트가 각각 독립적으로 진화한다.
- 서버의 기능이 변경되어도 클라이언트를 업데이트할 필요가 없다.
- REST를 만들게 된 계기: "How do I improve HTTP without breaking the Web."

<8강>

vs code terminal 에서 다음의 명령어들을 실행

ipython
import os
os.environ
os.envioron['DJANGO_SETTINGS_MODULE']
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kyungjuncompany.settings')
import django
django.setup()
from django.contrib.auth import get_user_model
User = get_user_model()
User.objects.all()
exit()

vs code 내에서 왼쪽 탐색창에서 파일을 열어도 되지만, Ctrl + P를 눌러서 실행하고자 하는 파일을 직접 실행시켜도 됨

django-extensions 내 shell_plus 명령

django-extensions.readthedocs.io
https://django-extensions.readthedocs.io/en/latest/

1)
쉘 > pip install djangl-extensions

2)
프로젝트 settings.INSTALLED_APPS에 "django_extensions" 추가

> 이렇게 하면

python .\manage.py shell_plus 실행시 자동으로 필요한 django 라이브러리들을 import 해줌

python .\manage.py shell_plus --notebook

python .\manage.py shell_plus --print-sql

<9강>

PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add        
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
 [X] 0009_alter_user_last_name_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 (no migrations)

---------------------------

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations shop
Migrations for 'shop':
  shop\migrations\0001_initial.py
    - Create model Item


PS C:\Dev\kyungjuncompany> python .\manage.py migrate shop
Operations to perform:
  Apply all migrations: shop
Running migrations:
  Applying shop.0001_initial... OK


----------------------------------

PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations     
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0009_alter_user_last_name_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 [ ] 0001_initial
PS C:\Dev\kyungjuncompany> python .\manage.py migrate shop
Operations to perform:
  Apply all migrations: shop
Running migrations:
  Applying shop.0001_initial... OK
PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations     
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
 [X] 0009_alter_user_last_name_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 [X] 0001_initial


settings.py 내에

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


<11강>

1) 마이그레이션 파일 생성: 
python manage.py makemigrations <앱이름>

2) 지정 데이터베이스에 마이그레이션 적용:
python manage.py migrate <앱이름>

3) 마이그레이션 적용 현황 출력:
python manage.py showmigrations <앱이름>

4) 지정 마이그레이션의 SQL 내역 출력:
python manage.py sqlmigrate <앱이름> <마이그레이션-이름>

[실습]
1) blog 앱 생성
python .\manage.py startapp blog

2) 
blog(앱)안의 urls.py 생성해서 다음의 내용을 넣고

from django.urls import path

app_name = 'blog'

urlpatterns = [

]

3)
kyungjuncompany안의 urls.py 안에

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('blog/', include('blog.urls')),               <--------------- 한 줄 추가
    path('shop/', include('shop.urls')),
]

4)
blgo 안의 models.py 안에 model 생성

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

5) 마이그레이션 파일 생성
PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations blog
Migrations for 'blog':
  blog\migrations\0001_initial.py
    - Create model Post

6) 지정 마이그레이션의 SQL 내역 출력

PS C:\Dev\kyungjuncompany> python .\manage.py sqlmigrate blog 0001_initial      <------- blog 앱내의 migrations 폴더안의 0001_initial.py의 파일 이름
BEGIN;
--
-- Create model Post
--
CREATE TABLE "blog_post" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(100) NOT NULL, "content" text NOT NULL,  <--------------------- kyungjuncompany 안의 settings.py 내에 DB가 sqlite3로 설정되어 있어서
"created_at" datetime NOT NULL, "updated_at" datetime NOT NULL); 										sqlite3로 이뤄진 query임
COMMIT;

[참고!!!!!]
kyungjuncompany 안의 settings.py 내에

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


sqltie3 대신 mysql, postgresql 을 적용하면

sqlmigrate 했을 때의 명령어들이 해당 DB에 따라 변형됨

7) PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations 
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
 [X] 0009_alter_user_last_name_max_length
blog
 [ ] 0001_initial     <--------------------------------- blog 앱에 대해서는 아직 migrations 수행 하지 않은 상태임
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 [X] 0001_initial

8) blog 앱에 대해 migrate 수행
PS C:\Dev\kyungjuncompany> python .\manage.py migrate blog
Operations to perform:
    Apply all migrations: blog
Running migrations:
    Applying blog.0001_initial.. OK

cf) DB Browser for SQLite 를 통해서도 blog_post라는 테이블이 생성된 것을 확인 가능함
9) blog 앱에 대해서 migrations 진행된 것을 확인 가능함                                                    
PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations blog
blog
 [X] 0001_initial

----------------------------------------------------------------------------------------------------------------------------------------------------------
1) 마이그레이션 Migrate (정/역 방향) 가능 설명하면서 모델을 추가함

blog 앱 안의 models.py 내에 

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE) <- CASCADE 옵션(장고1.x 기본옵션이엇음)을 통해서 post가 삭제 될 경우 댓글들도 같이 삭제를 수행
    message = models.TextField()

2) 새로운 모델 추가 후 python .\manage.py makemigrations blog 수행 후 결과는

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations blog
Migrations for 'blog':
  blog\migrations\0002_comment.py
    - Create model Comment


3) blog\migrations\0002_comment.py 파일 내 dependencies 설명

dependencies = [ 
    ('blog', '0001_initial'),   <---------- 현재 0002_comment의 migration이 적용되기 위해서는 앞서서 'blog' 앱에 있는 '0001_initial' 에 꼭 적용되어야 함
]


-----------------------------------------------------------------------------------------
you are trying to add a non-nullable field 'tags' to post without a default; we can't do that (the database needs something to populate existing rows).
> null도 넣지 않고, default도 넣지 않음. blank 아니라는 말은 없긴 함. 하지만 blank도 아니다

1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
2) Quit, and let me add a default in models.py

예시 #1. blank , null 옵션 없이 author_name = models.CharField(max_lenght=20) 을 추가함
blog > models.py 내에


from django.db import models

class Post(models.Model):
    author_name = models.CharField(max_lenght=20)
    title = models.CharField(max_length=100)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    message = models.TextField()

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations blog
You are trying to add a non-nullable field 'author_name' to post without a default; we can't do that (the database needs something 
to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py

1) 2번을 눌러 중단을 하고
Select an option: 2 ----------------> 중단하고

2) blank=True를 추가함
author_name = models.CharField(max_lenght=20, blank=True)   <------------- blank=True를 추가함

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations blog
Migrations for 'blog':
  blog\migrations\0003_post_author_name.py
    - Add field author_name to post
 
3) 0003_post_author_name.py는 아직 적용 안했기 때문에 삭제해줌

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
예시 #2. blank , null 옵션 없이 author_name = models.CharField(max_lenght=20) 을 추가함
blog > models.py 내에


from django.db import models

class Post(models.Model):
    author_name = models.CharField(max_lenght=20)
    title = models.CharField(max_length=100)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    message = models.TextField()


PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations blog
You are trying to add a non-nullable field 'author_name' to post without a default; we can't do that (the database needs something 

!!! 필드명을 잘 봐라 !!!!! - 'author_name'  > type을 확인가능하고 CharField에 맞는 값을 넣어줘야 함

to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py

1) 1번을 누르고
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now  ->>>>>>>>>>>>>>> 대개 여기에서 아무 생각 없이 timezone.now를 Enter 치는 경우가 있음
Type 'exit' to exit this prompt


2) '기본값을 입력해 줌'
>>> 'anonymous'
Migrations for 'blog':
  blog\migrations\0003_post_author_name.py
    - Add field author_name to post

3) blog > migrations > 0003_post_author_name.py 내에서 operations 부분에서 확인 가능함


# Generated by Django 2.1.11 on 2019-09-03 11:10

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0002_comment'),
    ]

    operations = [
        migrations.AddField(
            model_name='post',
            name='author_name',
            field=models.CharField(default='anonymous', max_length=20),
            preserve_default=False,
        ),
    ]


12강) 장고 Admin을 통한 데이터 관리

PS C:\Dev\kyungjuncompany> python .\manage.py runserver
Performing system checks...

System check identified no issues (0 silenced).

You have 2 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): blog.
Run 'python manage.py migrate' to apply them.
September 03, 2019 - 20:45:24
Django version 2.1.11, using settings 'kyungjuncompany.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

localhost:8000
localhost:8000/admin


kyungjuncompany > urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),    <------------------------------------- admin/이 지정되어 있어서 
    path('blog/', include('blog.urls')),
    path('shop/', include('shop.urls')),
]

By staff status
> All

By superuser status
> All

By active
> All

모델 클래스를 admin에 등록하기

shop 안의 admin.py 

1) Admin 홈에서 item이 노출이 되지 않는 상태인데, 노출하는 방법

from django.contrib import admin
from .models import Item 

# 등록법 #1
admin.site.register(Item) # 기본 ModelAdmin으로 동작

# 등록법 #2
class itemAdmin(admin.ModelAdmin):
    pass

admin.site.register(Item, ItemAdmin)  # 지정한 ModelAdmin으로 동작

# 등록법 #3
@admin.register(Item)
class ItemAdmin(admin.ModelAdmin):
    pass


2) Add item (Admin 에서 UI 형태로 진행)



모델 클래스에 __str__ 구현
admin 모델 리스트에서 "모델명 object"를 원하는 대로 변경하기 위해

Item object(1) 를  customizing 하기 위해
3)  shop > models.py 내에 코드를 추가함

from django.db import models

class Item(models.Model):
    name = models.CharField(max_length=100)
    desc = models.TextField(blank=True)
    price = models.PositiveIntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):				<- 해당 부분을 추가
        return self.name

(설명)
    def __str__(self):
        return f'<{self.pk}> {self.name}'                   <- python 3.6 부터 지원되는 문법
        return '<{}> {}'.format(self.pk, self.name)

4) list_display 속성 정의
모델 리스트에 출력할 컬럼 지정

cf) shop > admin.py

from django.contrib import admin
from .models import Item 


@admin.register(Item)
class ItemAdmin(admin.ModelAdmin):
    list_display = ['pk', 'name', 'short_desc', 'price']

    def short_desc(self, item):
        return item.desc[:20]

저장할 경우

>>> 
PK	NAME		SHORT DESC			PRICE
1	아이폰 XS		애플에서 2018년 9월에 발표한 아	1400000


5) shop > models.py 내 is_publish를 필드로 씀 (is_publish = models.BooleanField(default=False))

from django.db import models

class Item(models.Model):
    name = models.CharField(max_length=100)
    desc = models.TextField(blank=True)
    price = models.PositiveIntegerField()
    is_publish = models.BooleanField(default=False)        <--------- 필드 추가
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f'<{self.pk}> {self.name}'


6) python .\manage.py makemigrations shop 

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations shop
Migrations for 'shop':
  shop\migrations\0002_item_is_publish.py
    - Add field is_publish to item

7) migrate 진행 - 기존의 record 에 대해 false 적용

PS C:\Dev\kyungjuncompany> python .\manage.py migrate shop       
Operations to perform:
  Apply all migrations: shop
Running migrations:
  Applying shop.0002_item_is_publish... OK

8) shop > admin.py 내에서 list_display 에 'is_publish' 추가

from django.contrib import admin
from .models import Item 


@admin.register(Item)
class ItemAdmin(admin.ModelAdmin):
    list_display = ['pk', 'name', 'short_desc', 'price', 'is_publish']

    def short_desc(self, item):
        return item.desc[:20]


--------------------------------------------------------------------------------------

list_display_links 속성 정의
list_display 지정된 이름 중에, detail 링크를 걸 속성 리스트

from django.contrib import admin
from .models import Item 


@admin.register(Item)
class ItemAdmin(admin.ModelAdmin):
    list_display = ['pk', 'name', 'short_desc', 'price', 'is_publish']
    list_display_links = ['name']

    def short_desc(self, item):
        return item.desc[:20]

------------------------------------------------------------------------------------

search_fields 속성 정의
admin내 검색UI 통해, DB를 통한 where 쿼리 대상 필드 리스트

from django.contrib import admin
from .models import Item 


@admin.register(Item)
class ItemAdmin(admin.ModelAdmin):
    list_display = ['pk', 'name', 'short_desc', 'price', 'is_publish']
    list_display_links = ['name']
    search_fields = ['name']

    def short_desc(self, item):
        return item.desc[:20]


---------------------------------------------------------------------------------------

list_filter 속성 정의
지정 필드값으로 필터링 옵션 제공


from django.contrib import admin
from .models import Item 

@admin.register(Item)
class ItemAdmin(admin.ModelAdmin):
    list_display = ['pk', 'name', 'short_desc', 'price', 'is_publish']
    list_display_links = ['name']
    list_filter = ['is_publish']
    search_fields = ['name']

    def short_desc(self, item):
        return item.desc[:20]

<13강> 모델을 통한 조회 (기초)

QuerySet: SQL을 생성해주는 인터페이스

python .\manage.py shell_plus --print-sql

In [1]: Item.objects.all()
Out[1]: SELECT "shop_item"."id", "shop_item"."name", "shop_item"."desc", "shop_item"."price", "shop_item"."is_publish", "shop_item"."created_at", "shop_item"."updated_at" FROM "shop_item"  LIMIT 21


Execution time: 0.001001s [Database: default]

<QuerySet [<Item: <1> 아이폰 XS>]>

(주의) QuerySet이 출력되지 않음
qs = Item.objects.all()


실전예제) Item 목록/간단검색 페이지

shop/views.py

1. 

from django.http import HttpResponse
from django.shortcuts import render
from .models import Item <----------------- 추가

def archives_year(request, year):
    return HttpResponse('{}년도에 대한 내용'.format(year))


def item_list(request):   <--------------------- 추가
    qs = Item.objects.all()

    return render(request, 'shop/item_list.html', {
        'item_list': qs,
    })

2. 앱 이름과 동일한 디렉토리를 하나 더 만듬

shop/templates/shop


3. shop/templates/shop/item_list.html


4. shop/urls.py 

from django.urls import path, register_converter
from .converters import FourDigitYearConverter
from . import views

register_converter(FourDigitYearConverter, 'yyyy')

app_name = 'shop'

urlpatterns = [
    path('archives/<yyyy:year>/', views.archives_year),
    path('', views.item_list),  <-------------------------- 추가: item_list를 호출하겠다고 연결해줌
]


5. shop/templates/shop/item_list.html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Blog for KyungjunCompany</title>
    </head>
    <body>
        <h1>KyungjunCompany</h1>
        <form action="" method="GET">
            <input type="text" name="q" value="{{ q }}" />  <---------------------------  template을 넘겼으니 그 값을 value에서 찍어준다
            <input type="submit" value="search" />
        </form>
        
        <ul>
            {% for item in item_list %}
            <li>
                {{ item.name }}
                {{ item.price }}
                {{ item.desc }}
            </li>
            {% endfor %}
        </ul>
    </body>
</html>


5. 

from django.http import HttpResponse
from django.shortcuts import render
from .models import Item

def archives_year(request, year):
    return HttpResponse('{}년도에 대한 내용'.format(year))

def item_list(request):
    qs = Item.objects.all()

    [option#1.  검색 결과 매칭]
    q = request.GET.get('q', '') 
    if q:   <-------------------  문자열 가지고 참/거짓 판단할 때는 0이면 거짓, 1이상이면 참
        qs = qs.filter(name__icontains=q) <-------------------- 필드 타입별 다양한 조건 매칭 i는 Ignore Case
    return render(request, 'shop/item_list.html', {
        'item_list': qs,
    
    [option#2. 검색 키워드 표시]

        'q': q,  <----------------------------------- template을 넘겼으니 그 값을 value에서 찍어준다
    })



14강 모델을 통한 데이터 생성/수정/삭제

<<< Insert SQL >>>

방법1) 각 Item.objects의 create 함수 호출 -> 반환값 : 모델 객체

python manage.py shell_plus --print-sql

In [1]: Item
Out[1]: shop.models.Item

In [2]: Item.objects.create(name='iPhone XS', price=1500000)
BEGIN


Execution time: 0.000000s [Database: default]

INSERT INTO "shop_item" ("name", "desc", "price", "is_publish", "created_at", "updated_at") VALUES ('iPhone XS', '', 1500000, 0, '2019-09-13 06:43:11.608028', '2019-09-13 06:43:11.608028')


Execution time: 0.003000s [Database: default]

Out[2]: <Item: <3> iPhone XS>

-------------------------------------------------------------------------------------------------------------------

방법2) 각 모델의 인스턴스의 save 함수 호출 -> 반환값 : 모델 객체


In [3]: item = Item(name='iPhone XS Max')

In [4]: item.price = 1800000

In [5]: item.save()
BEGIN


Execution time: 0.000000s [Database: default]

INSERT INTO "shop_item" ("name", "desc", "price", "is_publish", "created_at", "updated_at") VALUES ('iPhone XS Max', '', 1800000, 0, '2019-09-13 06:47:18.198179', 
'2019-09-13 06:47:18.198179')


Execution time: 0.003204s [Database: default]

<<< UPDATE SQL >>>

# 방법1) 개별 모델 인스턴스의 save 함수 호출 -> 반환값: None

In [6]: item = Item.objects.all().first()
SELECT "shop_item"."id", "shop_item"."name", "shop_item"."desc", "shop_item"."price", "shop_item"."is_publish", "shop_item"."created_at", "shop_item"."updated_at" FROM "shop_item" ORDER BY "shop_item"."id" ASC  LIMIT 1


Execution time: 0.000000s [Database: default]


In [7]: item
Out[7]: <Item: <1> 아이폰 XS>

In [8]: item.price
Out[8]: 1400000

In [9]: item.price = 160000   <----- 가격 필드 수정 

In [10]: item.save()
BEGIN


Execution time: 0.000000s [Database: default]

UPDATE "shop_item" SET "name" = '아이폰 XS', "desc" = '애플에서 2018년 9월에 발표한 아이폰 새 버전입니다.그런데, 조금 비싼 감도 없지 않네요. 팀쿡은 하루 10000', "price" = 160000, "is_publish" = 0, "created_at" = '2019-09-03 14:10:56.698913', "updated_at" = '2019-09-13 06:55:06.827705' WHERE "shop_item"."id" = 1  <----- 가격 필드만 수정했으나 모든 필드에 대해서 수행됨


Execution time: 0.001997s [Database: default]


# 방법2) QuerySet의 update 함수 호출 -> 반환값 : 업데이트한 Row 개수 (정수)


In [11]: Item
Out[11]: shop.models.Item

In [12]: qs = Item.objects.all()

In [13]: qs
Out[13]: SELECT "shop_item"."id", "shop_item"."name", "shop_item"."desc", "shop_item"."price", "shop_item"."is_publish", "shop_item"."created_at", "shop_item"."updated_at" FROM "shop_item"  LIMIT 21


Execution time: 0.000000s [Database: default]

<QuerySet [<Item: <1> 아이폰 XS>, <Item: <2> Lg>, <Item: <3> iPhone XS>, <Item: <4> iPhone XS Max>]>

In [14]: qs.update(desc='changed desc')
BEGIN


Execution time: 0.000000s [Database: default]

UPDATE "shop_item" SET "desc" = 'changed desc'


Execution time: 0.006019s [Database: default]

Out[14]: 4


>>>>> 방법 1과 방법 2과 다르니 확인 필요 SQL 문도 다름


insert 에도 모델.save() 하는 방식이 있고, update 에도 모델.save()하는 방식이 있는데 언제 insert이고 언제 update 이냐?

>> 장고의 내부 Logic의 경우 모델.pk가 None일 때는 insert를 수행하고, 모델.pk가 None 이 아닐때는 update를 수행함 (주의! 임의로 모델.pk에 값을 넣어서 수행하려고 하면 안됨)


15강: 관계를 표현하는 모델 필드

python manage.py shell_plus --print-sql

from blog.models import Post, Comment

Post.objects.all().count()

Post.objects.create(author_name='user1', title='title1, content='content1')

>>>>> 이 부분에서 계속 에러가 났는데! 

S C:\Dev\kyungjuncompany> python .\manage.py showmigrations
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0009_alter_user_last_name_max_length
blog
 [X] 0001_initial
 [ ] 0002_comment                                                   <------------------------------------- blog 앱에 대해서 migration이 되지 않은 부분이 있어서 그런것으로 파악됨
 [ ] 0003_post_author_name
 [X] 0001_initial
 [X] 0002_remove_content_type_name


그래서 이를 해결 하기 위해

PS C:\Dev\kyungjuncompany> python .\manage.py migrate blog   <------------------------- blog 앱에 대해 migrate를 수행함
Operations to perform:
  Apply all migrations: blog
Running migrations:
  Applying blog.0002_comment... OK
  Applying blog.0003_post_author_name... OK



OperationalError: table blog_post has no column named author_name


python manage.py shell_plus --print-sql

Post.objects.all().count()





Comment.objects.create(post=post, message='message1')


>>>> 또 여기서 오류가 남! 원인은 NameError: name 'post' is not defined 였기 때문임

post = Post.objects.all().first()


In [1]: from blog.models import Post, Comment

In [2]: Post.objects.all().count()
SELECT COUNT(*) AS "__count" FROM "blog_post"


Execution time: 0.002003s [Database: default]

Out[2]: 0

In [3]: Post.objects.create(author_name='user1', title='title1', content='content1')
BEGIN


Execution time: 0.000000s [Database: default]

INSERT INTO "blog_post" ("author_name", "title", "content", "created_at", "updated_at") VALUES ('user1', 'title1', 'content1', '2019-09-17 14:46:01.806623', '2019-09-17 14:46:01.806623')


Execution time: 0.000991s [Database: default]

Out[3]: <Post: Post object (1)>

In [4]: Post.objects.all().count()
SELECT COUNT(*) AS "__count" FROM "blog_post"

Execution time: 0.001003s [Database: default]

Out[4]: 1





In [5]: Comment.objects.create(post=post, message='message1')
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-5-a2e15a83d40d> in <module>
----> 1 Comment.objects.create(post=post, message='message1')

NameError: name 'post' is not defined
In [6]: Post.objects.all().count()                                                                                              

In [6]: Comment.objects.create(post=post, message='message1')
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-6-a2e15a83d40d> in <module>
----> 1 Comment.objects.create(post=post, message='message1')

NameError: name 'post' is not defined





In [2]: Post.objects.all().first()
SELECT "blog_post"."id", "blog_post"."author_name", "blog_post"."title", "blog_post"."content", "blog_post"."created_at", "blog_post"."updated_at" FROM "blog_post" ORDER BY "blog_post"."id" ASC  LIMIT 1


Execution time: 0.001000s [Database: default]

Out[2]: <Post: Post object (1)>


In [3]: post = Post.objects.all().first()
SELECT "blog_post"."id", "blog_post"."author_name", "blog_post"."title", "blog_post"."content", "blog_post"."created_at", "blog_post"."updated_at" FROM "blog_post" ORDER BY "blog_post"."id" ASC  LIMIT 1


Execution time: 0.001001s [Database: default]

















Comment.objects.create(post=post, message='message2')

Comment.objects.create(post=post, message='message3')




In [4]: Comment.objects.create(post=post, message='message1')
BEGIN


Execution time: 0.000000s [Database: default]

INSERT INTO "blog_comment" ("post_id", "message") VALUES (1, 'message1')


Execution time: 0.002001s [Database: default]

Out[4]: <Comment: Comment object (1)>

In [5]: Comment.objects.create(post=post, message='message2')
BEGIN


Execution time: 0.000000s [Database: default]

INSERT INTO "blog_comment" ("post_id", "message") VALUES (1, 'message2')


Execution time: 0.002020s [Database: default]

Out[5]: <Comment: Comment object (2)>

In [6]: Comment.objects.create(post=post, message='message3')
BEGIN


Execution time: 0.000000s [Database: default]

INSERT INTO "blog_comment" ("post_id", "message") VALUES (1, 'message3')


Execution time: 0.005504s [Database: default]

Out[6]: <Comment: Comment object (3)>


Comment.objects.all().count()

ㄱ. post.comment_set.all()

ㄴ. Comment.objects.filter(post=post)

'ㄱ'과 'ㄴ'의 결과가 같은 SQL을 가리킴



Out[1]: 3

In [2]: post.comment_set.all()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-2-ae4779a7e333> in <module>
----> 1 post.comment_set.all()

NameError: name 'post' is not defined

In [3]: from blog.models import Post, Comment

In [4]: post.comment_set.all()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-4-ae4779a7e333> in <module>
----> 1 post.comment_set.all()

NameError: name 'post' is not defined

In [5]: post = Post.objects.all().first()
SELECT "blog_post"."id", "blog_post"."author_name", "blog_post"."title", "blog_post"."content", "blog_post"."created_at", "blog_post"."updated_at" FROM "blog_post" ORDER BY "blog_post"."id" ASC  LIMIT 1


Execution time: 0.001063s [Database: default]


In [6]: post.comment_set.all()
Out[6]: SELECT "blog_comment"."id", "blog_comment"."post_id", "blog_comment"."message" FROM "blog_comment" WHERE "blog_comment"."post_id" = 1  LIMIT 21


Execution time: 0.000000s [Database: default]

<QuerySet [<Comment: Comment object (1)>, <Comment: Comment object (2)>, <Comment: Comment object (3)>]>

In [7]: Comment.objects.filter(post=post)
Out[7]: SELECT "blog_comment"."id", "blog_comment"."post_id", "blog_comment"."message" FROM "blog_comment" WHERE "blog_comment"."post_id" = 1  LIMIT 21


Execution time: 0.000259s [Database: default]

<QuerySet [<Comment: Comment object (1)>, <Comment: Comment object (2)>, <Comment: Comment object (3)>]>

FK에서의 related_name
reverse 접근 시의 속성명 : 디폴트 -> "모델명소문자_set"


교재 전체 revers_name -> related_name 충돌할 경우 해당 예제 실습중

1) shop > models.py
from django.conf import settings
from django.db import models

class Item(models.Model):
    name = models.CharField(max_length=100)
    desc = models.TextField(blank=True)
    price = models.PositiveIntegerField()
    is_publish = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f'<{self.pk}> {self.name}'


class Post(models.Model):
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)


2) blog > models.py

from django.conf import settings
from django.db import models

class Post(models.Model):
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    author_name = models.CharField(max_length=20)
    title = models.CharField(max_length=100)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    message = models.TextField()



>>> blog와 shop 각각의 앱에서도 AUTH_USER_MODEL 에 관해서 외래키 존재) 

3) 에러 확인 - makemigrations 명령이 실패

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations
SystemCheckError: System check identified some issues:

ERRORS:
blog.Post.author: (fields.E304) Reverse accessor for 'Post.author' clashes with reverse accessor for 
'Post.author'.
        HINT: Add or change a related_name argument to the definition for 'Post.author' or 'Post.author'.
shop.Post.author: (fields.E304) Reverse accessor for 'Post.author' clashes with reverse accessor for 
'Post.author'.
        HINT: A

4) 해결 방법
이름 충돌 피하기
> ㄱ. 어느 한쪽의 FK에 대해, reverse_name을 포기 -> related_name='+'
> ㄴ. 어느 한쪽의 (혹은 모두) FK의 reverse_name을 변경
	1) ex) FK(User, ..., related_name="blog_post_set")
	2) ex) FK(User, ..., related_name="shop_post_set")


[참고 --- timezone.now]
PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations
You are trying to add a non-nullable field 'author' to post without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>>
Please enter some code, or 'exit' (with no quotes) to exit.
>>> 'anonymous'
Migrations for 'blog':
  blog\migrations\0004_post_author.py
    - Add field author to post
Migrations for 'shop':
  shop\migrations\0003_post.py
    - Create model Post
 
16강 django-debug-toolbar를 통한 SQL 디버깅
django-debug-toolbar 설치

공식 문서 참고: https://django-debug-toolbar.readthedocs.io/en/latest/installation.html
pip install django-debug-toolbar 설치후
project의 urls.py 공식문서에서 추가하라는 내용 추가 해야 함

cf)

    urlpatterns = [
        path('__debug__/', include(debug_toolbar.urls)),
    ] + urlpatterns

(다음과 같은 형태와 같음) -> '+='
>> urlpatterns += [
        path('__debug__/', include(debug_toolbar.urls)),
    ]



주의사항
1) project의 settings.py 공식문서에서 추가하라는 내용 추가 해야 함
>> INTERNAL_IPS = ['127.0.0.1']
추가하는 것 잊지 말것!
2) 웹페이지의 템플릿에 필히 "<body>" 태그가 있어야만 django 

[코드를 통한 SQL 내역 확인]

- QuerySet의 query 속성 참조
(예시)
In [2]: from shop.models import Item

In [3]: qs = Item.objects.all()

In [4]: qs.query
Out[4]: <django.db.models.sql.query.Query at 0x2667605c320>

In [5]: str(qs.query)
Out[5]: 'SELECT "shop_item"."id", "shop_item"."name", "shop_item"."desc", "shop_item"."price", "shop_item"."is_publish", "shop_item"."created_at", "shop_item"."updated_at" FROM "shop_item"'

In [6]: print(qs.query)
SELECT "shop_item"."id", "shop_item"."name", "shop_item"."desc", "shop_item"."price", "shop_item"."is_publish", "shop_item"."created_at", "shop_item"."updated_at" 
FROM "shop_item"





쿼리 확인


In [7]: from django.db import connection, connections

In [8]: connection.queries
Out[8]: []

In [9]: qs.all()
Out[9]: <QuerySet [<Item: <1> 아이폰 XS>, <Item: <2> Lg>, <Item: <3> iPhone XS>, <Item: <4> iPhone XS Max>]>

In [10]: connection.queries
Out[10]: 
[{'sql': 'SELECT "shop_item"."id", "shop_item"."name", "shop_item"."desc", "shop_item"."price", "shop_item"."is_publish", "shop_item"."created_at", "shop_item"."updated_at" FROM "shop_item"  LIMIT 21',
  'time': '0.002'}]

In [11]: qs.all()
Out[11]: <QuerySet [<Item: <1> 아이폰 XS>, <Item: <2> Lg>, <Item: <3> iPhone XS>, <Item: <4> iPhone XS Max>]>

In [12]: qs.all()
Out[12]: <QuerySet [<Item: <1> 아이폰 XS>, <Item: <2> Lg>, <Item: <3> iPhone XS>, <Item: <4> iPhone XS Max>]>

In [13]: qs.all()
Out[13]: <QuerySet [<Item: <1> 아이폰 XS>, <Item: <2> Lg>, <Item: <3> iPhone XS>, <Item: <4> iPhone XS Max>]>

In [14]: connection.queries
Out[14]: 
[{'sql': 'SELECT "shop_item"."id", "shop_item"."name", "shop_item"."desc", "shop_item"."price", "shop_item"."is_publish", "shop_item"."created_at", "shop_item"."updated_at" FROM "shop_item"  LIMIT 21',
  'time': '0.002'},
 {'sql': 'SELECT "shop_item"."id", "shop_item"."name", "shop_item"."desc", "shop_item"."price", "shop_item"."is_publish", "shop_item"."created_at", "shop_item"."updated_at" FROM "shop_item"  LIMIT 21',
  'time': '0.001'},
 {'sql': 'SELECT "shop_item"."id", "shop_item"."name", "shop_item"."desc", "shop_item"."price", "shop_item"."is_publish", "shop_item"."created_at", "shop_item"."updated_at" FROM "shop_item"  LIMIT 21',
  'time': '0.001'},
 {'sql': 'SELECT "shop_item"."id", "shop_item"."name", "shop_item"."desc", "shop_item"."price", "shop_item"."is_publish", "shop_item"."created_at", "shop_item"."updated_at" FROM "shop_item"  LIMIT 21',
  'time': '0.000'}]


장고 개발시에는 settings.DEBUG = True -> False (필히 해줄 것) -> settings.DEBUG = True 시에만 쿼리 실행내역을 메모리에 누적


그 외: django-querycount
- SQL 실행내역을 개발서버 콘솔 표준출력
- Ajax 내역도 출력 가능
https://github.com/bradmontgomery/django-querycount/

17강 장고 Logging과 SQL Logging 처리

DEBUG : Detailed information, typically of interest
