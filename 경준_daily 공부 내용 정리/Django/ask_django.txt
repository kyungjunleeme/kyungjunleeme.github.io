장고 어드민 계정 정보:
kyungjun / qweasdzxc1!


pip install "django~=2.1.0"
> 2.1.x 버전중에 최신버전을 설치한다.

django-admin --version
> 장고 버전 확인

django-admin startproject askcompany
> 프로젝트 생성

start .

cd askcompany

ptyhon manage.py migrate

python manage.py createsuperuser

python manage.py runserver


<3강> 

장고 앱 만들기

python manage.py startapp shop

python manage.py startapp blog


<4강>

view를 하나 만들어보려고함

보통 view를 urls.py에 만들지는 않음

pip install pyling-django

<5강>



python .\manage.py startapp shop

<step 1. shop app 안의 urls.py>

shop app 안의 urls.py

from django.urls import path

app_name = 'shop'

urlpatterns = [

]

<step 2. KYUNGJUNCOMPANY 프로젝트 안의 settings.py>

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop',   <--------------------------------- 앱 추가
]
 
<step 3. 프로젝트 안의 urls.py>

from django.contrib import admin
from django.urls import path, include   <----- include 추가

urlpatterns = [
    path('admin/', admin.site.urls),
    paht('shop/', include('shop.urls')),    <--------추가
]

커스텀 Path Converter

새로운 장고 앱을 생성할 때, 추천 작업

<step1. 앱 밑에 converters.py>


class FourDigitYearConverter:
    regex = r'\d{4}'

    def to_python(self, value):
        return int(value)

    def to_url(self, value):
        return '%04d' % value

<step2. 앱 밑에 urls.py>

from django.urls import path, register_converter
from .converters import FourDigitYearConverter
from . import views

register_converter(FourDigitYearConverter, 'yyyy')

app_name = 'shop'

urlpatterns = [
    path('archives/<yyyy:year>/', views.archives_year)
]


<step3. 앱 밑에 views.py>
from django.http import HttpResponse
from django.shortcuts import render

def archives_year(request, year):
    return HttpResponse('{}년도에 대한 내용'.format(year))

<step4. 결과 확인>
http://127.0.0.1:8000/shop/archives/2018/
> 2018년도에 대한 내용 (출력됨)

> (추가 설명)

http://127.0.0.1:8000/shop/

> project의 urls.py에서 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('shop/', include('shop.urls')),
]

shop으로 시작하고, 나머지 주소는 shop.urls에서 이어서 가는 거임


archives/2018/

> shop의 urls.py에서 

app_name = 'shop'

urlpatterns = [
    path('archives/<yyyy:year>/', views.archives_year)  >>>숫자가 4번 반복되는 패턴에서는 archives_year이 호출된다.
]

<6강>

다양한 타입의 HttpResponse

MIME 타입

> https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types

[프로그램적인 파일 다운로드]
https://start.goodtime.co.kr/2009/04/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%A0%81%EC%9D%B8-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C/

[browser 한글 Content-Disposition 헤더의 filename 매개 변수를 HTTP로 인코딩하는 방법]
https://code.i-harness.com/ko-kr/q/16d6f

<7강>
그런 REST API로 괜찮은가
https://tv.naver.com/v/2292653#comment_focus

REST
interoperability - 상호운용성
REST 가 어떤 계기로 나온건가?
REST(2000) - Roy T. Fielding 박사논문
"Architectural Styles and the Design of Network-based Software Architectures"

-----------------------------------------------------------

API

그런데

CMIS(2008)
- CMS를 위한 표준
- EMC, IBM, Microsoft등이 함께 작업
- REST 바인딩 지원

(반박)
Roy T. Fielding: "No Rest in CMIS"

Microsoft REST API Guidelines (2016)

(반박)
Roy T. Fielding: "s/REST API/HTTP API/"
"REST APIs must be hypertext-driven"
"REST API를 위한 최고의 버저닝 전략은 버저닝을 안 하는 것"

REST API
> REST 아키텍쳐 스타일을 따르는 API

REST
> 분산 하이퍼미디어 시스템(예: 웹)을 위한 아키텍쳐 스타일

아키텍쳐 스타일
> 제약조건의 집합

독립적 진화
- 서버와 클라이언트가 각각 독립적으로 진화한다.
- 서버의 기능이 변경되어도 클라이언트를 업데이트할 필요가 없다.
- REST를 만들게 된 계기: "How do I improve HTTP without breaking the Web."

<8강>

vs code terminal 에서 다음의 명령어들을 실행

ipython
import os
os.environ
os.envioron['DJANGO_SETTINGS_MODULE']
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kyungjuncompany.settings')
import django
django.setup()
from django.contrib.auth import get_user_model
User = get_user_model()
User.objects.all()
exit()

vs code 내에서 왼쪽 탐색창에서 파일을 열어도 되지만, Ctrl + P를 눌러서 실행하고자 하는 파일을 직접 실행시켜도 됨

django-extensions 내 shell_plus 명령

django-extensions.readthedocs.io
https://django-extensions.readthedocs.io/en/latest/

1)
쉘 > pip install djangl-extensions

2)
프로젝트 settings.INSTALLED_APPS에 "django_extensions" 추가

> 이렇게 하면

python .\manage.py shell_plus 실행시 자동으로 필요한 django 라이브러리들을 import 해줌

python .\manage.py shell_plus --notebook

python .\manage.py shell_plus --print-sql

<9강>

PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add        
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
 [X] 0009_alter_user_last_name_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 (no migrations)

---------------------------

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations shop
Migrations for 'shop':
  shop\migrations\0001_initial.py
    - Create model Item


PS C:\Dev\kyungjuncompany> python .\manage.py migrate shop
Operations to perform:
  Apply all migrations: shop
Running migrations:
  Applying shop.0001_initial... OK


----------------------------------

PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations     
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0009_alter_user_last_name_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 [ ] 0001_initial
PS C:\Dev\kyungjuncompany> python .\manage.py migrate shop
Operations to perform:
  Apply all migrations: shop
Running migrations:
  Applying shop.0001_initial... OK
PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations     
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
 [X] 0009_alter_user_last_name_max_length
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 [X] 0001_initial


settings.py 내에

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


<11강>

1) 마이그레이션 파일 생성: 
python manage.py makemigrations <앱이름>

2) 지정 데이터베이스에 마이그레이션 적용:
python manage.py migrate <앱이름>

3) 마이그레이션 적용 현황 출력:
python manage.py showmigrations <앱이름>

4) 지정 마이그레이션의 SQL 내역 출력:
python manage.py sqlmigrate <앱이름> <마이그레이션-이름>

[실습]
1) blog 앱 생성
python .\manage.py startapp blog

2) 
blog(앱)안의 urls.py 생성해서 다음의 내용을 넣고

from django.urls import path

app_name = 'blog'

urlpatterns = [

]

3)
kyungjuncompany안의 urls.py 안에

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('blog/', include('blog.urls')),               <--------------- 한 줄 추가
    path('shop/', include('shop.urls')),
]

4)
blgo 안의 models.py 안에 model 생성

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

5) 마이그레이션 파일 생성
PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations blog
Migrations for 'blog':
  blog\migrations\0001_initial.py
    - Create model Post

6) 지정 마이그레이션의 SQL 내역 출력

PS C:\Dev\kyungjuncompany> python .\manage.py sqlmigrate blog 0001_initial      <------- blog 앱내의 migrations 폴더안의 0001_initial.py의 파일 이름
BEGIN;
--
-- Create model Post
--
CREATE TABLE "blog_post" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(100) NOT NULL, "content" text NOT NULL,  <--------------------- kyungjuncompany 안의 settings.py 내에 DB가 sqlite3로 설정되어 있어서
"created_at" datetime NOT NULL, "updated_at" datetime NOT NULL); 										sqlite3로 이뤄진 query임
COMMIT;

[참고!!!!!]
kyungjuncompany 안의 settings.py 내에

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


sqltie3 대신 mysql, postgresql 을 적용하면

sqlmigrate 했을 때의 명령어들이 해당 DB에 따라 변형됨

7) PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations 
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
 [X] 0003_logentry_add_action_flag_choices
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
 [X] 0009_alter_user_last_name_max_length
blog
 [ ] 0001_initial     <--------------------------------- blog 앱에 대해서는 아직 migrations 수행 하지 않은 상태임
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
sessions
 [X] 0001_initial
shop
 [X] 0001_initial

8) blog 앱에 대해 migrate 수행
PS C:\Dev\kyungjuncompany> python .\manage.py migrate blog
Operations to perform:
    Apply all migrations: blog
Running migrations:
    Applying blog.0001_initial.. OK

cf) DB Browser for SQLite 를 통해서도 blog_post라는 테이블이 생성된 것을 확인 가능함
9) blog 앱에 대해서 migrations 진행된 것을 확인 가능함                                                    
PS C:\Dev\kyungjuncompany> python .\manage.py showmigrations blog
blog
 [X] 0001_initial

----------------------------------------------------------------------------------------------------------------------------------------------------------
1) 마이그레이션 Migrate (정/역 방향) 가능 설명하면서 모델을 추가함

blog 앱 안의 models.py 내에 

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE) <- CASCADE 옵션(장고1.x 기본옵션이엇음)을 통해서 post가 삭제 될 경우 댓글들도 같이 삭제를 수행
    message = models.TextField()

2) 새로운 모델 추가 후 python .\manage.py makemigrations blog 수행 후 결과는

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations blog
Migrations for 'blog':
  blog\migrations\0002_comment.py
    - Create model Comment


3) blog\migrations\0002_comment.py 파일 내 dependencies 설명

dependencies = [ 
    ('blog', '0001_initial'),   <---------- 현재 0002_comment의 migration이 적용되기 위해서는 앞서서 'blog' 앱에 있는 '0001_initial' 에 꼭 적용되어야 함
]


-----------------------------------------------------------------------------------------
you are trying to add a non-nullable field 'tags' to post without a default; we can't do that (the database needs something to populate existing rows).
> null도 넣지 않고, default도 넣지 않음. blank 아니라는 말은 없긴 함. 하지만 blank도 아니다

1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
2) Quit, and let me add a default in models.py

예시 #1. blank , null 옵션 없이 author_name = models.CharField(max_lenght=20) 을 추가함
blog > models.py 내에


from django.db import models

class Post(models.Model):
    author_name = models.CharField(max_lenght=20)
    title = models.CharField(max_length=100)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    message = models.TextField()

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations blog
You are trying to add a non-nullable field 'author_name' to post without a default; we can't do that (the database needs something 
to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py

1) 2번을 눌러 중단을 하고
Select an option: 2 ----------------> 중단하고

2) blank=True를 추가함
author_name = models.CharField(max_lenght=20, blank=True)   <------------- blank=True를 추가함

PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations blog
Migrations for 'blog':
  blog\migrations\0003_post_author_name.py
    - Add field author_name to post
 
3) 0003_post_author_name.py는 아직 적용 안했기 때문에 삭제해줌

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
예시 #2. blank , null 옵션 없이 author_name = models.CharField(max_lenght=20) 을 추가함
blog > models.py 내에


from django.db import models

class Post(models.Model):
    author_name = models.CharField(max_lenght=20)
    title = models.CharField(max_length=100)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    message = models.TextField()


PS C:\Dev\kyungjuncompany> python .\manage.py makemigrations blog
You are trying to add a non-nullable field 'author_name' to post without a default; we can't do that (the database needs something 

!!! 필드명을 잘 봐라 !!!!! - 'author_name'  > type을 확인가능하고 CharField에 맞는 값을 넣어줘야 함

to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py

1) 1번을 누르고
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now  ->>>>>>>>>>>>>>> 대개 여기에서 아무 생각 없이 timezone.now를 Enter 치는 경우가 있음
Type 'exit' to exit this prompt


2) '기본값을 입력해 줌'
>>> 'anonymous'
Migrations for 'blog':
  blog\migrations\0003_post_author_name.py
    - Add field author_name to post

3) blog > migrations > 0003_post_author_name.py 내에서 operations 부분에서 확인 가능함


# Generated by Django 2.1.11 on 2019-09-03 11:10

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0002_comment'),
    ]

    operations = [
        migrations.AddField(
            model_name='post',
            name='author_name',
            field=models.CharField(default='anonymous', max_length=20),
            preserve_default=False,
        ),
    ]


12강) 장고 Admin을 통한 데이터 관리

PS C:\Dev\kyungjuncompany> python .\manage.py runserver
Performing system checks...

System check identified no issues (0 silenced).

You have 2 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): blog.
Run 'python manage.py migrate' to apply them.
September 03, 2019 - 20:45:24
Django version 2.1.11, using settings 'kyungjuncompany.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

localhost:8000
localhost:8000/admin


kyungjuncompany > urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),    <------------------------------------- admin/이 지정되어 있어서 
    path('blog/', include('blog.urls')),
    path('shop/', include('shop.urls')),
]

By staff status
> All

By superuser status
> All

By active
> All

모델 클래스를 admin에 등록하기

shop 안의 admin.py 

1)

from django.contrib import admin
from .models import Item 

# 등록법 #1
admin.site.register(Item) # 기본 ModelAdmin으로 동작

# 등록법 #2
class itemAdmin(admin.ModelAdmin):
    pass

admin.site.register(Item, ItemAdmin)  # 지정한 ModelAdmin으로 동작

# 등록법 #3
@admin.register(Item)
class ItemAdmin(admin.ModelAdmin):
    pass


Item object(1)